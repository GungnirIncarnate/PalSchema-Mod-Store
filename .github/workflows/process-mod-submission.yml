name: Process Mod Submission

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process-submission:
    if: |
      (github.event_name == 'issues' && (
        contains(github.event.issue.labels.*.name, 'mod-submission') ||
        contains(github.event.issue.title, '[MOD SUBMISSION]') ||
        contains(github.event.issue.title, 'MOD SUBMISSION')
      )) || 
      (github.event_name == 'issue_comment' && contains(github.event.issue.labels.*.name, 'mod-submission'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Debug event information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          echo "Issue title: ${{ github.event.issue.title }}"
          echo "Issue labels: ${{ toJson(github.event.issue.labels) }}"
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "Issue event detected"
            echo "Label name: ${{ github.event.label.name }}"
          fi
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "Comment event detected"
            echo "Comment body: ${{ github.event.comment.body }}"
          fi
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Parse mod submission
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body;
            
            // Parse the issue body to extract mod information
            const parseField = (fieldName) => {
              const regex = new RegExp(`### ${fieldName}\\s*([\\s\\S]*?)(?=###|$)`);
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            };
            
            const modInfo = {
              name: parseField('Mod Name') || parseField('ModName'),
              version: parseField('Version'),
              description: parseField('Description'),
              author: parseField('Author'),
              tags: parseField('Tags'),
              minGameVersion: parseField('Minimum Game Version'),
              homepage: parseField('Homepage'),
              sourceCode: parseField('Source Code'),
              modDownloadUrl: parseField('Mod ZIP File Download URL'),
              iconDownloadUrl: parseField('Icon Download URL')
            };
            
            // Create folder name from mod name
            const folderName = modInfo.name.replace(/[^a-zA-Z0-9]/g, '');
            
            core.setOutput('mod-name', modInfo.name);
            core.setOutput('folder-name', folderName);
            core.setOutput('version', modInfo.version);
            core.setOutput('description', modInfo.description);
            core.setOutput('author', modInfo.author);
            core.setOutput('mod-download-url', modInfo.modDownloadUrl);
            core.setOutput('icon-download-url', modInfo.iconDownloadUrl);
            core.setOutput('issue-number', issue.number);
            
            return modInfo;
      
      - name: Create mod structure (manual approval)
        if: contains(github.event.comment.body, '/approve-mod')
        run: |
          # This would be triggered by a maintainer comment "/approve-mod"
          echo "🔧 Creating mod structure for: ${{ steps.parse.outputs.mod-name }}"
          
          # Create mod directory
          mkdir -p "mods/${{ steps.parse.outputs.folder-name }}"
          
          # Create mod-info.json
          cat > "mods/${{ steps.parse.outputs.folder-name }}/mod-info.json" << 'EOF'
          {
            "ModName": "${{ steps.parse.outputs.mod-name }}",
            "Version": "${{ steps.parse.outputs.version }}",
            "Description": "${{ steps.parse.outputs.description }}",
            "Author": "${{ steps.parse.outputs.author }}",
            "Tags": ["pending"],
            "MinGameVersion": "0.3.0"
          }
          EOF
          
          echo "📝 Mod structure created."
      
      - name: Download mod files
        if: contains(github.event.comment.body, '/approve-mod')
        run: |
          MOD_FOLDER="mods/${{ steps.parse.outputs.folder-name }}"
          MOD_ZIP_URL="${{ steps.parse.outputs.mod-download-url }}"
          ICON_URL="${{ steps.parse.outputs.icon-download-url }}"
          
          echo "📥 Downloading mod files..."
          
          # Download mod ZIP file
          if [ ! -z "$MOD_ZIP_URL" ] && [ "$MOD_ZIP_URL" != "null" ]; then
            echo "Downloading mod ZIP from: $MOD_ZIP_URL"
            
            # Extract filename from URL or create one
            ZIP_FILENAME=$(basename "$MOD_ZIP_URL")
            if [[ "$ZIP_FILENAME" != *.zip ]]; then
              ZIP_FILENAME="${{ steps.parse.outputs.folder-name }}-v${{ steps.parse.outputs.version }}.zip"
            fi
            
            # Download with wget (fallback to curl)
            if command -v wget &> /dev/null; then
              wget -O "$MOD_FOLDER/$ZIP_FILENAME" "$MOD_ZIP_URL" || echo "❌ Failed to download mod ZIP"
            elif command -v curl &> /dev/null; then
              curl -L -o "$MOD_FOLDER/$ZIP_FILENAME" "$MOD_ZIP_URL" || echo "❌ Failed to download mod ZIP"
            else
              echo "❌ Neither wget nor curl available for download"
            fi
            
            # Verify download
            if [ -f "$MOD_FOLDER/$ZIP_FILENAME" ]; then
              FILE_SIZE=$(stat -c%s "$MOD_FOLDER/$ZIP_FILENAME" 2>/dev/null || stat -f%z "$MOD_FOLDER/$ZIP_FILENAME" 2>/dev/null || echo "0")
              echo "✅ Mod ZIP downloaded successfully ($FILE_SIZE bytes)"
            else
              echo "❌ Mod ZIP download failed"
            fi
          else
            echo "⚠️ No mod ZIP URL provided"
          fi
          
          # Download icon file
          if [ ! -z "$ICON_URL" ] && [ "$ICON_URL" != "null" ]; then
            echo "Downloading icon from: $ICON_URL"
            
            # Extract extension from URL
            ICON_EXT="${ICON_URL##*.}"
            case "$ICON_EXT" in
              png|jpg|jpeg|gif|webp) ICON_FILENAME="icon.$ICON_EXT" ;;
              *) ICON_FILENAME="icon.png" ;;
            esac
            
            # Download icon
            if command -v wget &> /dev/null; then
              wget -O "$MOD_FOLDER/$ICON_FILENAME" "$ICON_URL" || echo "⚠️ Failed to download icon (optional)"
            elif command -v curl &> /dev/null; then
              curl -L -o "$MOD_FOLDER/$ICON_FILENAME" "$ICON_URL" || echo "⚠️ Failed to download icon (optional)"
            fi
            
            # Verify icon download
            if [ -f "$MOD_FOLDER/$ICON_FILENAME" ]; then
              echo "✅ Icon downloaded successfully"
            else
              echo "⚠️ Icon download failed (optional file)"
            fi
          else
            echo "ℹ️ No icon URL provided (optional)"
          fi
          
          echo "📁 Download process completed"
      
      - name: Commit mod structure
        if: contains(github.event.comment.body, '/approve-mod')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git add "mods/${{ steps.parse.outputs.folder-name }}/"
          git commit -m "✅ Add approved mod with files: ${{ steps.parse.outputs.mod-name }} v${{ steps.parse.outputs.version }} (Issue #${{ steps.parse.outputs.issue-number }})"
          git push
          echo "🚀 Mod structure committed and pushed to repository"
      
      - name: Update manifest
        if: contains(github.event.comment.body, '/approve-mod')
        run: |
          echo "🔄 Updating manifest with new mod..."
          python scripts/generate-manifest.py
          
          # Check if manifest changed
          if git diff --quiet manifest.json; then
            echo "ℹ️ No manifest changes needed"
          else
            echo "📝 Manifest updated, committing changes..."
            git add manifest.json
            git commit -m "🤖 Auto-update manifest after adding ${{ steps.parse.outputs.mod-name }}"
            git push
            echo "✅ Manifest updated and pushed"
          fi
      
      - name: Add approval comment
        if: contains(github.event.comment.body, '/approve-mod')
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ **Mod Approved and Fully Processed!**
              
              **${{ steps.parse.outputs.mod-name }}** has been approved and automatically added to the mod store!
              
              **📁 Mod Location:** \`mods/${{ steps.parse.outputs.folder-name }}/\`
              
              **📥 Files Downloaded:**
              - ✅ Mod metadata (mod-info.json)
              - 📦 Mod ZIP file (automatically downloaded)
              - 🖼️ Icon file (if provided)
              
              **Next Steps:**
              1. 🔄 Manifest will be updated automatically
              2. ✅ Mod will be available in mod managers within 15 minutes
              3. 🎉 Users can now download and install your mod!
              
              **Download URLs used:**
              - **Mod ZIP:** ${{ steps.parse.outputs.mod-download-url }}
              - **Icon:** ${{ steps.parse.outputs.icon-download-url }}
              
              Your mod is now live in the PalSchema Mod Store! Thank you for contributing! 🚀`
            });
      
      - name: Add processing comment
        if: github.event_name == 'issues' && (github.event.action == 'labeled' || github.event.action == 'opened')
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🎮 **Mod Submission Received!**
              
              Thank you for submitting **${{ steps.parse.outputs.mod-name }}** to the PalSchema Mod Store!
              
              **Next Steps:**
              1. 🔍 Our team will review your submission
              2. 🧪 We'll test the mod for compatibility and safety
              3. ✅ If approved, your mod will be added to the store
              
              **For Maintainers:**
              - Review the mod details above
              - Download and test the mod files:
                - **Mod ZIP:** ${{ steps.parse.outputs.mod-download-url }}
                - **Icon:** ${{ steps.parse.outputs.icon-download-url }}
              - Comment \`/approve-mod\` to process this submission
              - Comment \`/reject-mod [reason]\` to reject with explanation
              
              **Estimated Review Time:** 2-5 business days
              
              We'll keep you updated on the status! 🚀`
            });
      
      - name: Handle rejection
        if: contains(github.event.comment.body, '/reject-mod')
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            const reason = comment.replace('/reject-mod', '').trim();
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **Mod Submission Rejected**
              
              Unfortunately, we cannot accept **${{ steps.parse.outputs.mod-name }}** at this time.
              
              **Reason:** ${reason || 'No reason provided'}
              
              **What you can do:**
              - Address the issues mentioned above
              - Submit a new mod submission with the fixes
              - Join our Discord for help and discussion
              
              Thank you for your contribution! 🙏`
            });
            
            // Close the issue
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              labels: ['mod-submission', 'rejected']
            });