name: Process Mod Submission

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process-submission:
    if: |
      (github.event_name == 'issues' && (
        contains(github.event.issue.labels.*.name, 'mod-submission') ||
        contains(github.event.issue.title, '[MOD SUBMISSION]') ||
        contains(github.event.issue.title, 'MOD SUBMISSION')
      )) || 
      (github.event_name == 'issue_comment' && contains(github.event.issue.labels.*.name, 'mod-submission'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Debug event information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          echo "Issue title: ${{ github.event.issue.title }}"
          echo "Issue labels: ${{ toJson(github.event.issue.labels) }}"
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "Issue event detected"
            echo "Label name: ${{ github.event.label.name }}"
          fi
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "Comment event detected"
            echo "Comment body: ${{ github.event.comment.body }}"
          fi
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Parse mod submission
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body;
            
            // Parse the issue body to extract mod information
            const parseField = (fieldName) => {
              const regex = new RegExp(`### ${fieldName}\\s*([\\s\\S]*?)(?=###|$)`);
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            };
            
            const modInfo = {
              name: parseField('Mod Name') || parseField('ModName'),
              version: parseField('Version'),
              description: parseField('Description'),
              author: parseField('Author'),
              tags: parseField('Tags'),
              minGameVersion: parseField('Minimum Game Version'),
              homepage: parseField('Homepage'),
              sourceCode: parseField('Source Code'),
              modDownloadUrl: parseField('Mod ZIP File Download URL'),
              iconDownloadUrl: parseField('Icon Download URL')
            };
            
            // Create folder name from mod name
            const folderName = modInfo.name.replace(/[^a-zA-Z0-9]/g, '');
            
            core.setOutput('mod-name', modInfo.name);
            core.setOutput('folder-name', folderName);
            core.setOutput('version', modInfo.version);
            core.setOutput('description', modInfo.description);
            core.setOutput('author', modInfo.author);
            core.setOutput('mod-download-url', modInfo.modDownloadUrl);
            core.setOutput('icon-download-url', modInfo.iconDownloadUrl);
            core.setOutput('issue-number', issue.number);
            
            return modInfo;
      
      - name: Create mod structure (manual approval)
        if: contains(github.event.comment.body, '/approve-mod')
        run: |
          # This would be triggered by a maintainer comment "/approve-mod"
          echo "🔧 Creating mod structure for: ${{ steps.parse.outputs.mod-name }}"
          
          # Create mod directory
          mkdir -p "mods/${{ steps.parse.outputs.folder-name }}"
          
          # Create mod-info.json
          cat > "mods/${{ steps.parse.outputs.folder-name }}/mod-info.json" << 'EOF'
          {
            "ModName": "${{ steps.parse.outputs.mod-name }}",
            "Version": "${{ steps.parse.outputs.version }}",
            "Description": "${{ steps.parse.outputs.description }}",
            "Author": "${{ steps.parse.outputs.author }}",
            "Tags": ["pending"],
            "MinGameVersion": "0.3.0"
          }
          EOF
          
          echo "📝 Mod structure created. Manual download and validation required."
      
      - name: Commit mod structure
        if: contains(github.event.comment.body, '/approve-mod')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git add "mods/${{ steps.parse.outputs.folder-name }}/"
          git commit -m "✅ Add approved mod structure: ${{ steps.parse.outputs.mod-name }} v${{ steps.parse.outputs.version }} (Issue #${{ steps.parse.outputs.issue-number }})"
          git push
          echo "🚀 Mod structure committed and pushed to repository"
      
      - name: Add approval comment
        if: contains(github.event.comment.body, '/approve-mod')
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ **Mod Approved and Structure Created!**
              
              **${{ steps.parse.outputs.mod-name }}** has been approved and added to the mod store!
              
              **📁 Mod Location:** \`mods/${{ steps.parse.outputs.folder-name }}/\`
              
              **Next Steps:**
              1. 📥 Download and add the mod files:
                 - **Mod ZIP:** ${{ steps.parse.outputs.mod-download-url }}
                 - **Icon:** ${{ steps.parse.outputs.icon-download-url }}
              2. 🔄 Run manifest generation to update the store
              3. ✅ Mod will be available in mod managers
              
              The basic mod structure has been created. Please download the actual mod files and add them to complete the process.
              
              Thank you for contributing to the PalSchema community! 🎉`
            });
      
      - name: Add processing comment
        if: github.event_name == 'issues' && (github.event.action == 'labeled' || github.event.action == 'opened')
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🎮 **Mod Submission Received!**
              
              Thank you for submitting **${{ steps.parse.outputs.mod-name }}** to the PalSchema Mod Store!
              
              **Next Steps:**
              1. 🔍 Our team will review your submission
              2. 🧪 We'll test the mod for compatibility and safety
              3. ✅ If approved, your mod will be added to the store
              
              **For Maintainers:**
              - Review the mod details above
              - Download and test the mod files:
                - **Mod ZIP:** ${{ steps.parse.outputs.mod-download-url }}
                - **Icon:** ${{ steps.parse.outputs.icon-download-url }}
              - Comment \`/approve-mod\` to process this submission
              - Comment \`/reject-mod [reason]\` to reject with explanation
              
              **Estimated Review Time:** 2-5 business days
              
              We'll keep you updated on the status! 🚀`
            });
      
      - name: Handle rejection
        if: contains(github.event.comment.body, '/reject-mod')
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            const reason = comment.replace('/reject-mod', '').trim();
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **Mod Submission Rejected**
              
              Unfortunately, we cannot accept **${{ steps.parse.outputs.mod-name }}** at this time.
              
              **Reason:** ${reason || 'No reason provided'}
              
              **What you can do:**
              - Address the issues mentioned above
              - Submit a new mod submission with the fixes
              - Join our Discord for help and discussion
              
              Thank you for your contribution! 🙏`
            });
            
            // Close the issue
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              labels: ['mod-submission', 'rejected']
            });